package com.projeto.backend.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.projeto.backend.dto.ColaboradorDTO;
import com.projeto.backend.entities.ColaboradorEntity;
import com.projeto.backend.repository.ColaboradorRepository;

import jakarta.persistence.EntityNotFoundException;

@Service
public class ColaboradorService {
	
	@Autowired
	ColaboradorRepository colaboradorRepository;

	
	@Transactional(readOnly = true)
	public ColaboradorDTO findById(Long id) {
		ColaboradorEntity colaboradorEntity = colaboradorRepository.findById(id).get();
		return new ColaboradorDTO(colaboradorEntity);
	}
	
	@Transactional(readOnly = true)
	public Page<ColaboradorDTO> findAll(Pageable pageable) {
		Page<ColaboradorEntity> colaboradorEntity = colaboradorRepository.findAll(pageable);
		return colaboradorEntity.map(x -> new ColaboradorDTO(x));
	}
	
	@Transactional
	public ColaboradorDTO insert(ColaboradorDTO dto) {
		ColaboradorEntity entity = new ColaboradorEntity();
		copyDtoToEntity(dto, entity);
		entity = colaboradorRepository.save(entity);
		return new ColaboradorDTO(entity);
	}
	
	@Transactional
	public ProductDTO update(Long id, ProductDTO dto) {
		try {
			Product entity = repository.getReferenceById(id);		
			copyDtoToEntity(dto, entity);
			entity = repository.save(entity);
			return new ProductDTO(entity);
		}
		catch(EntityNotFoundException e) {
			throw new ResourceNotFoundException("Recurso não encontrado");
		}
		
	}
	
	@Transactional(propagation = Propagation.SUPPORTS)
	public void delete(Long id) {
		if (!repository.existsById(id)) {
			throw new ResourceNotFoundException("Recurso não encontrado");
		}
		try {
	        	repository.deleteById(id);    		
		}
	    	catch (DataIntegrityViolationException e) {
	        	throw new DatabaseException("Falha de integridade referencial");
	   	}
	}
	
	private void copyDtoToEntity(ColaboradorDTO dto,ColaboradorDTO entity) {
		entity.setName(dto.getName());
		entity.setDescription(dto.getDescription());
		entity.setPrice(dto.getPrice());	
		entity.setImgUrl(dto.getImgUrl());
		
		this.id = entity.getId();
		this.nome = entity.getNome();
		this.departament = entity.getDepartamento();
		this.cargo = entity.getCargo();
		this.salario = entity.getSalario();
		this.descricaocargo = entity.getDescricaocargo();
	}
}
